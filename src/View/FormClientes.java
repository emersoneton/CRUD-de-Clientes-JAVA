/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Classes.SoLetrasMaiusculas;
import Classes.SoNumeros;
import Controller.CadastroDeClientes;
import Controller.GeraPdf;
import Model.ClientesDAO;
import Tabelas.TableModelClientes;
import Tabelas.TableModelClientesRelatorios;
import com.sun.xml.internal.bind.v2.runtime.output.SAXOutput;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;
import jdk.nashorn.internal.ir.BreakNode;

/**
 *
 * @author Emerson
 */
public class FormClientes extends javax.swing.JFrame {

    //INSTANCIA DA CLASSE DE TABELA ABSTRATA DO CLIENTE
    TableModelClientes tabelaInsereTelefone = new TableModelClientes();
    TableModelClientesRelatorios tabelaInsereRelatorios = new TableModelClientesRelatorios();

    DefaultListModel MODELO;
    DefaultListModel MODELO2;

    int enter = 0;
    int pesquisaOuRelatorio = 0;

    // INICIA AO ABRIR O SISTEMA
    public FormClientes() {
        initComponents();
        Inicalizar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        paineisDeAcao = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        painelCadastro = new javax.swing.JPanel();
        ListaClientes = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtValorGasto = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        comboboxSexo = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtObservacao = new javax.swing.JTextField();
        btnInserir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaTelefones = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        txtLimiteDeCredito = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnRemover = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        txtCpf = new javax.swing.JFormattedTextField();
        txtCodigoArea = new javax.swing.JFormattedTextField();
        txtCidade = new javax.swing.JTextField();
        painelRelatorio = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtNomeOuCidadeRelatorio = new javax.swing.JTextField();
        btnBuscarRelatorio = new javax.swing.JButton();
        Lista = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        txtCodigoRelatorio = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        cmbCodigo = new javax.swing.JCheckBox();
        cmbNome = new javax.swing.JCheckBox();
        cmbCidade = new javax.swing.JCheckBox();
        cmbTodos = new javax.swing.JCheckBox();
        btnPdf = new javax.swing.JButton();
        Painel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaRelatoriosClientes = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Clientes");

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("CLIENTES");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        paineisDeAcao.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        paineisDeAcao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paineisDeAcaoMousePressed(evt);
            }
        });

        painelCadastro.setBackground(new java.awt.Color(204, 204, 204));
        painelCadastro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ListaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ListaClientesMousePressed(evt);
            }
        });

        jLabel4.setText("Endereço:");

        jLabel2.setText("Código:");

        txtValorGasto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtValorGastoKeyReleased(evt);
            }
        });

        txtCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCodigoMousePressed(evt);
            }
        });
        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoKeyReleased(evt);
            }
        });

        jLabel3.setText("Nome:");

        txtNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtNomeMousePressed(evt);
            }
        });
        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeKeyReleased(evt);
            }
        });

        jLabel7.setText("CPF:");

        jLabel5.setText("Cidade:");

        jLabel6.setText("Bairro:");

        jLabel8.setText("Sexo:");

        comboboxSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Feminino" }));

        jLabel11.setText("DDD:");

        jLabel12.setText("Telefone:");

        jLabel13.setText("Observação:");

        btnInserir.setText("Inserir");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });
        btnInserir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnInserirKeyPressed(evt);
            }
        });

        tabelaTelefones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaTelefones);

        jLabel10.setText("Valor de Gasto:");

        txtLimiteDeCredito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLimiteDeCreditoKeyReleased(evt);
            }
        });

        jLabel9.setText("Limite de Crédito:");

        btnRemover.setText("Excluir");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnEditar.setText("Alterar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        txtCpf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCpfMousePressed(evt);
            }
        });

        txtCodigoArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoAreaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelCadastroLayout = new javax.swing.GroupLayout(painelCadastro);
        painelCadastro.setLayout(painelCadastroLayout);
        painelCadastroLayout.setHorizontalGroup(
            painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCadastroLayout.createSequentialGroup()
                        .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelCadastroLayout.createSequentialGroup()
                                        .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel4)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtEndereco))
                                    .addGroup(painelCadastroLayout.createSequentialGroup()
                                        .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13)
                                        .addComponent(jLabel6)
                                        .addGap(4, 4, 4)
                                        .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(73, 73, 73)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboboxSexo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(6, 6, 6))
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(ListaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(30, Short.MAX_VALUE))))
                    .addGroup(painelCadastroLayout.createSequentialGroup()
                        .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)
                                .addGap(6, 6, 6)
                                .addComponent(txtNome))
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLimiteDeCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtValorGasto, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(30, 30, 30)
                                .addComponent(txtCodigoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnInserir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
        );
        painelCadastroLayout.setVerticalGroup(
            painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(painelCadastroLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCadastroLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel4))
                            .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboboxSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelCadastroLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)))))
                    .addGroup(painelCadastroLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ListaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(txtCodigoArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnInserir)
                        .addComponent(jLabel13)))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditar)
                        .addComponent(btnRemover))
                    .addGroup(painelCadastroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(txtLimiteDeCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtValorGasto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        paineisDeAcao.addTab("CADASTRO", jPanel3);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel15.setText("Nome / Cidade:");

        txtNomeOuCidadeRelatorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtNomeOuCidadeRelatorioMousePressed(evt);
            }
        });
        txtNomeOuCidadeRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeOuCidadeRelatorioActionPerformed(evt);
            }
        });
        txtNomeOuCidadeRelatorio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeOuCidadeRelatorioKeyReleased(evt);
            }
        });

        btnBuscarRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/buscar.png"))); // NOI18N
        btnBuscarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarRelatorioActionPerformed(evt);
            }
        });

        Lista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ListaMousePressed(evt);
            }
        });

        jLabel14.setText("Código:");

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cmbCodigo.setText("Código");
        cmbCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbCodigoMousePressed(evt);
            }
        });

        cmbNome.setText("Nome");
        cmbNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbNomeMousePressed(evt);
            }
        });

        cmbCidade.setText("Cidade");
        cmbCidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbCidadeMousePressed(evt);
            }
        });

        cmbTodos.setText("Todos");
        cmbTodos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbTodosMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbCodigo)
                    .addComponent(cmbNome)
                    .addComponent(cmbCidade)
                    .addComponent(cmbTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbCodigo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCidade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbTodos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pdf.png"))); // NOI18N
        btnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(4, 4, 4)
                        .addComponent(txtCodigoRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeOuCidadeRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Lista, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscarRelatorio))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Lista, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(txtNomeOuCidadeRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(txtCodigoRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscarRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPdf, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addGap(16, 16, 16))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Painel9.setBackground(new java.awt.Color(204, 204, 204));
        Painel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tabelaRelatoriosClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaRelatoriosClientes);

        javax.swing.GroupLayout Painel9Layout = new javax.swing.GroupLayout(Painel9);
        Painel9.setLayout(Painel9Layout);
        Painel9Layout.setHorizontalGroup(
            Painel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        Painel9Layout.setVerticalGroup(
            Painel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout painelRelatorioLayout = new javax.swing.GroupLayout(painelRelatorio);
        painelRelatorio.setLayout(painelRelatorioLayout);
        painelRelatorioLayout.setHorizontalGroup(
            painelRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 811, Short.MAX_VALUE)
            .addComponent(Painel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        painelRelatorioLayout.setVerticalGroup(
            painelRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelRelatorioLayout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Painel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paineisDeAcao.addTab("RELATÓRIOS", painelRelatorio);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ações", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/salvar.png"))); // NOI18N
        btnSalvar.setText("SALVAR");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/buscar.png"))); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editar.png"))); // NOI18N
        btnAlterar.setText("ALTERAR");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sair.png"))); // NOI18N
        btnSair.setText("SAIR");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cancelar.png"))); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/deletar.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                .addGap(201, 201, 201)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paineisDeAcao)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paineisDeAcao, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Inicializar Componentes com o Programa
    private void Inicalizar() {
        BuscarCodigoCliente();                           // Busca o Ultimo código válido no cliente
        setResizable(false);                               //Não permite editar o tamanho
        this.setLocationRelativeTo(null);                 //Centralizar Jframe
        tabelaTelefones.setModel(tabelaInsereTelefone);  // SETA E INICIALIZA A TABELA ABSTRATA COM AS COLUNAS E O VINCULO DA TABELA
        tabelaRelatoriosClientes.setModel(tabelaInsereRelatorios);
        Mascaras();                                     // Inicializa a função de Mascaras nos campos que utilizam informações de separação
        txtNome.setDocument(new SoLetrasMaiusculas()); // Atribui uma classe de Letras Maiusculas para não deixar o usuario colocar letras minusculas
        txtCodigo.requestFocus();                     // Seta o ponteiro para o código do cliente

        // Atribui uma classe de Numéricos para não deixar o usuario colocar nada alem de numeros neste campo;
        txtTelefone.setDocument(new SoNumeros());
        // ***************************************************************************************************

        txtCodigoRelatorio.setEnabled(false);
        txtNomeOuCidadeRelatorio.setEnabled(false);

        // Cria a lista para inserção de valores no LIST através da pesquisa pelo TextField
        Lista.setVisible(false);
        ListaClientes.setVisible(false);
        MODELO = new DefaultListModel();
        MODELO2 = new DefaultListModel();
        Lista.setModel(MODELO);
        ListaClientes.setModel(MODELO2);
        // ********************************
    }

    //BUSCA O ULTIMO CÓDIGO VÁLIDO NO BD E RETORNA PARA O CLIENTE
    private void BuscarCodigoCliente() {
        CadastroDeClientes cli = new CadastroDeClientes();

        ClientesDAO cliDao = new ClientesDAO();

        cliDao.BuscarCodigoCliente(cli);

        txtCodigo.setText(String.valueOf(cli.getCodigo()));

    }

    // MÁSCARAS DE TEXTO
    private void Mascaras() {
        MaskFormatter maskCpf, maskCodigoArea;

        try {

            maskCpf = new MaskFormatter("###.###.###-##");
            maskCpf.install(txtCpf);

            maskCodigoArea = new MaskFormatter("(##)");
            maskCodigoArea.install(txtCodigoArea);

        } catch (ParseException ex) {
            Logger.getLogger(FormClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //BOTÃO SALVAR CADASTRO DE CLIENTE
    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        ValidarCamposObrigatorios();                // Valida os campos que são obrigatórios serem preenchidos

        if (ValidarCamposObrigatorios() == true) { // se o valor de retorno voltar Verdadeiro que passou no teste ele salva as informações no BD
            SalvarCliente();
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private boolean ValidarCamposObrigatorios() {

        boolean valida = false;     // Variável que retorna se passou ou não nos testes

        int valorNaoInformado = 0; // Variavel que deve ter valor zero para passar nos teste, se for diferente de zero o cliente não informou algum campo obrigatório

        // Valida cada campo Obrigatório que o cliente deve preencher
        if (txtNome.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'NOME' deve ser preenchido!");
            valorNaoInformado = 1;
        }
        if (txtCpf.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'CPF' deve ser preenchido!");
            valorNaoInformado = 1;
        }
        if (txtEndereco.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'ENDEREÇO' deve ser preenchido!");
            valorNaoInformado = 1;
        }
        if (txtCidade.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'CIDADE' deve ser preenchido!");
            valorNaoInformado = 1;
        }
        if (txtBairro.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'BAIRRO' deve ser preenchido!");
            valorNaoInformado = 1;
        }
        if (txtLimiteDeCredito.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'LIMITE DE CRÉDITO' deve ser preenchido!");
            valorNaoInformado = 1;
        }
        if (txtValorGasto.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "O campo 'VALOR DE GASTOS' deve ser preenchido!");
            valorNaoInformado = 1;
        }

        if (valorNaoInformado == 0) { // verifico se passou em todos os testes com campos preenchidos
            return valida = true;
        }

        return valida = false;

    }

    //METODO SALVAR CLIENTES
    private void SalvarCliente() {

        // Instaciando a classe Cadastro de clientes
        CadastroDeClientes cli = new CadastroDeClientes();

        cli.setCodigo(Integer.parseInt(txtCodigo.getText()));
        cli.setNome(txtNome.getText());
        cli.setCpf(txtCpf.getText().replace(".", "").replace("-", "")); // Comando replace limpo a mascara para enviar somente os numeros ao BD
        cli.setEndereco(txtEndereco.getText());
        cli.setCidade(txtCidade.getText());
        cli.setBairro(txtBairro.getText());

        // Selecionando qual tipo de ComboBOX foi informado e envia para salvar as informações
        if (comboboxSexo.getSelectedItem() == "Masculino") {
            cli.setSexo("01"); // em binário 01 significa 1
        } else if (comboboxSexo.getSelectedItem() == "Feminino") {
            cli.setSexo("10"); // em binário 10 significa 2
        }

        cli.setLimiteCredito(Double.parseDouble(txtLimiteDeCredito.getText().replace(".", "").replace(',', '.')));
        cli.setValorGasto(Double.parseDouble(txtValorGasto.getText().replace(".", "").replace(',', '.')));

        //Instancia da Modal ClientesDAO
        ClientesDAO cliDao = new ClientesDAO();
        cliDao.Salvar(cli);

        int cont = tabelaTelefones.getRowCount();
        cli.setContador(cont); // Crio um Contador para receber o valor da Tabela para validar na Classe de DAO

        // VALIDO QUANTAS PASSADAS NO FOR ELE TERÁ QUE DAR E INSERIR AS INFORMAÇÕES NO BD ATRAVES DA CLASSE DAO
        for (int x = 0; x < cont; x++) {
            CadastroDeClientes cli1 = new CadastroDeClientes();

            cli1.setCodigo(Integer.parseInt(txtCodigo.getText()));
            cli1.setCodigoArea(Integer.parseInt(tabelaInsereTelefone.getValueAt(x, 0).toString()));
            cli1.setTelefone(tabelaInsereTelefone.getValueAt(x, 1).toString());
            cli1.setObservacao(tabelaInsereTelefone.getValueAt(x, 2).toString());

            cliDao.SalvarTelefones(cli1);
        }

        Cancelar();
    }

    //BOTÃO DE SAIR DO FORM (CADASTRO DE CLIENTE)
    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    //BOTÃO DE INSERIR DADOS DE TELEFONE NA TEBELA DE TELEFONES
    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed

        ValidaDadosDeTelefones(); // Valida se os campos Código de Area e Telefone foram Preenchidos antes de inserir na tabela de telefones

        if (ValidaDadosDeTelefones() == true) {
            InsereTelefonesNaTabela();
        } else {
            JOptionPane.showMessageDialog(null, "Os campos de (Código de Área) e (Telefone) devem ser preenchidos antes de inserir");
        }

    }//GEN-LAST:event_btnInserirActionPerformed

    //TESTA SE TEM DADOS PARA SEREM INSERIDOS NA TEBELA DE TELEFONES
    private boolean ValidaDadosDeTelefones() {
        boolean valida = false;

        int validadorDeErros = 0;  // Valida se não foram inseridos dados nos campos obrigatórios para insse~ção na tabela de telefones

        if (txtCodigoArea.getText().equals("(  )")) {

            validadorDeErros = 1;

        }
        if (txtTelefone.getText().length() <= 0) {

            validadorDeErros = 1;

        }

        // Se não teve erros na inserção de dados ele retorna Verdadeiro para o teste de inserção na tabela
        if (validadorDeErros == 0) {
            return valida = true;
        }

        return valida = false;
    }

    //BOTÃO CANCELAR TUDO
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        Cancelar();

    }//GEN-LAST:event_btnCancelarActionPerformed

    // BOTÃO ALTERAR ITENS DA TABELA DE TELEFONES
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        if (tabelaTelefones.getSelectedRow() != -1) { // Se for diferente de -1 existe algo na tabela

            //Altera a linha e coluna que o usuario clicou quando prescionou o botão de Alterar
            tabelaInsereTelefone.setValueAt(txtCodigoArea.getText().replace("(", "").replace(")", ""), tabelaTelefones.getSelectedRow(), 0);
            tabelaInsereTelefone.setValueAt(txtTelefone.getText(), tabelaTelefones.getSelectedRow(), 1);
            tabelaInsereTelefone.setValueAt(txtObservacao.getText(), tabelaTelefones.getSelectedRow(), 2);

        } else {
            JOptionPane.showMessageDialog(null, "Não tem Telefone para ser Alterado!");
        }

    }//GEN-LAST:event_btnEditarActionPerformed

    // BOTÃO REMOVER ITENS DA TABELA DE TELEFONES
    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed

        if (tabelaTelefones.getSelectedRow() != -1) { // Se for diferente de -1 existe algo na tabela.

            tabelaInsereTelefone.removeRow(tabelaTelefones.getSelectedRow()); //Exclui a linha que o usuário selecionou e prescionou o botão de excluir

        } else {
            JOptionPane.showMessageDialog(null, "Não tem Telefone para serm Excluido!");
        }

    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        DecimalFormat df = new DecimalFormat("###,###,###,###,###.00"); // Modifica o formato para REAL (Melhor visualização para o usuario)

        CadastroDeClientes cli = new CadastroDeClientes();

        if (pesquisaOuRelatorio == 1) {
            cli.setNome(txtNome.getText());
        } else {
            cli.setCodigo(Integer.parseInt(txtCodigo.getText()));
        }

        ClientesDAO cliDao = new ClientesDAO();
        cliDao.BuscarCliente(cli);

        // TESTA SE EXISTE AS INFORMAÇÕES NO BD CONFORME OS PARÂMETROS QUE O CLIENTE INFORMOU
        if (cliDao.BuscarCliente(cli) == true) {

            txtBairro.setText(cli.getBairro());
            txtCidade.setText(cli.getCidade());
            txtCpf.setText(cli.getCpf());
            txtEndereco.setText(cli.getEndereco());
            txtNome.setText(cli.getNome());
            txtCodigo.setText("" + cli.getCodigo());

            String limiteCredito = df.format(cli.getLimiteCredito());
            txtLimiteDeCredito.setText(limiteCredito);

            String valorGastos = df.format(cli.getValorGasto());
            txtValorGasto.setText(valorGastos);

            //Seleciona qual sexo que foi salvo no cadastro de clientes
            String sexo = cli.getSexo();
            if (sexo.trim().equals("1")) {
                comboboxSexo.setSelectedItem("Masculino");
            } else if (sexo.trim().equals("2")) {
                comboboxSexo.setSelectedItem("Feminino");
            }

            List<CadastroDeClientes> lista = cliDao.BuscarTelefoneDeCliente(cli);
            for (int x = 0; x < lista.size(); x++) {
                CadastroDeClientes cli1 = new CadastroDeClientes();

                cli1.setCodigoArea(lista.get(x).getCodigoArea());
                cli1.setTelefone(lista.get(x).getTelefone());
                cli1.setObservacao(lista.get(x).getObservacao());

                tabelaInsereTelefone.addRow(cli1);
            }

            // DEIXA LIBERADO O BOTÃO DE INSERIR PARA ALTERAR O TELEFONE NO CADASTRO
            cli.setCodigo(Integer.parseInt(txtCodigo.getText()));
            cliDao.VerificaCodigoTelefone(cli);
            if (cliDao.VerificaCodigoTelefone(cli) == true) { // código do cliente já existe na tabela clientetelefones
                //  btnInserir.setEnabled(false);
            }

            btnRemover.setEnabled(false);
            btnSalvar.setEnabled(false);

        } else {
            JOptionPane.showMessageDialog(null, "NÃO TEM DADOS PARA PARÂMENTROS INFORMADOS NO BANCO DE DADOS!");
            Cancelar();
        }


    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        // JOGA UM ALERTA DO PERÍGO DE EXCLUIR UM CLIENTE E VERIFICA SE REALMENTE O USUÁRIO QUER EXCLUIR O CADASTRO
        int resposta = JOptionPane.showConfirmDialog(null, "Deseja Realmente (EXCLUIR) O Cliente?? \n\n"
                + "as informações serão deletadas e não poderão ser recuperadas", "ALERTA", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {

            ValidarCamposObrigatorios();                // Valida os campos que são obrigatórios serem preenchidos

            if (ValidarCamposObrigatorios() == true) { // se o valor de retorno voltar Verdadeiro que passou no teste ele salva as informações no BD
                Deletar(); // Chama o método de excluir o cliete
            }

        }

    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnInserirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnInserirKeyPressed

    }//GEN-LAST:event_btnInserirKeyPressed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed

        ValidarCamposObrigatorios();                // Valida os campos que são obrigatórios serem preenchidos

        if (ValidarCamposObrigatorios() == true) { // se o valor de retorno voltar Verdadeiro que passou no teste ele salva as informações no BD
            AlterarCliente();
        }

    }//GEN-LAST:event_btnAlterarActionPerformed

    private void cmbCodigoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCodigoMousePressed

        if (cmbCodigo.isSelected()) {
            txtCodigoRelatorio.setEnabled(false);
        } else {
            txtCodigoRelatorio.setEnabled(true);
        }

        cmbCidade.setSelected(false);
        cmbNome.setSelected(false);
        cmbTodos.setSelected(false);
        txtNomeOuCidadeRelatorio.setEnabled(false);
        txtNomeOuCidadeRelatorio.setText("");
        txtCodigoRelatorio.setText("");

    }//GEN-LAST:event_cmbCodigoMousePressed

    private void cmbNomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbNomeMousePressed

        if (cmbNome.isSelected()) {
            txtNomeOuCidadeRelatorio.setEnabled(false);
        } else {
            txtNomeOuCidadeRelatorio.setEnabled(true);
        }

        cmbCodigo.setSelected(false);
        cmbCidade.setSelected(false);
        cmbTodos.setSelected(false);
        txtCodigoRelatorio.setEnabled(false);
        txtNomeOuCidadeRelatorio.setText("");

    }//GEN-LAST:event_cmbNomeMousePressed

    private void cmbCidadeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCidadeMousePressed

        if (cmbCidade.isSelected()) {
            txtNomeOuCidadeRelatorio.setEnabled(false);
        } else {
            txtNomeOuCidadeRelatorio.setEnabled(true);
        }

        cmbCodigo.setSelected(false);
        cmbNome.setSelected(false);
        cmbTodos.setSelected(false);
        txtCodigoRelatorio.setEnabled(false);
        txtNomeOuCidadeRelatorio.setText("");
        Lista.setVisible(false);

    }//GEN-LAST:event_cmbCidadeMousePressed

    private void ListaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaMousePressed

        MostrarPesquisaConsulta();
        Lista.setVisible(false);

    }//GEN-LAST:event_ListaMousePressed

    private void txtNomeOuCidadeRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeOuCidadeRelatorioActionPerformed

        Lista.setVisible(false);
        enter = 1;

    }//GEN-LAST:event_txtNomeOuCidadeRelatorioActionPerformed

    private void txtNomeOuCidadeRelatorioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeOuCidadeRelatorioKeyReleased

        if (cmbNome.isSelected()) {
            if (enter == 0) {
                ListaDePesquisa();
                pesquisaOuRelatorio = 2; // // Atribui 2 para pesquisas realizadas na busca De relatórios do cliente
            } else {
                enter = 0;
            }
        }

    }//GEN-LAST:event_txtNomeOuCidadeRelatorioKeyReleased

    private void btnBuscarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarRelatorioActionPerformed

        int contadorTabela = tabelaInsereRelatorios.getRowCount();
        if (contadorTabela > 0) {
            for (int x = 0; x < contadorTabela; x++) {
                tabelaInsereRelatorios.removeRow(0);
            }
        }

        PesquisarRelatoriosDeClientes();

    }//GEN-LAST:event_btnBuscarRelatorioActionPerformed

    private void PesquisarRelatoriosDeClientes() {

        CadastroDeClientes cli = new CadastroDeClientes();
        ClientesDAO cliDao = new ClientesDAO();

        int validaPreenchimento = 0; // VALIDA SE O USUARIO INFORMOU CORRETAMENTO UM VALOR NOS CAMPOS DE PESQUISA, 1 SIGNIFICA QUE SIM E 0 QUE NÃO ATENDEU AS ESPECTATIVAS

        if (cmbCodigo.isSelected()) {
            if (txtCodigoRelatorio.getText().length() > 0) {
                cli.setCodigo(Integer.parseInt(txtCodigoRelatorio.getText()));
                cli.setClicked("CODIGO");
                validaPreenchimento = 1;
            } else {
                JOptionPane.showMessageDialog(null, "É OBRIGATÓRIO informar um CÓDIGO antes de continuar.");
            }

        } else if (cmbNome.isSelected()) {
            if (txtNomeOuCidadeRelatorio.getText().length() > 0) {
                cli.setNome(txtNomeOuCidadeRelatorio.getText());
                cli.setClicked("NOME");
                validaPreenchimento = 1;
            } else {
                JOptionPane.showMessageDialog(null, "É OBRIGATÓRIO informar um NOME antes de continuar.");
            }
        } else if (cmbCidade.isSelected()) {
            if (txtNomeOuCidadeRelatorio.getText().length() > 0) {
                cli.setCidade(txtNomeOuCidadeRelatorio.getText());
                cli.setClicked("CIDADE");
                validaPreenchimento = 1;
            } else {
                JOptionPane.showMessageDialog(null, "É OBRIGATÓRIO informar uma CIDADE antes de continuar.");
            }
        } else if (cmbTodos.isSelected()) {
            cli.setClicked("TODOS");
        } else {
            JOptionPane.showMessageDialog(null, "INFORME UMA AÇÃO DE RELATÓRIO ANTES DE PESQUISAR");
        }

        List<CadastroDeClientes> lista = cliDao.PesquisaDeRelatorio(cli);

        if (lista.size() == 0 && validaPreenchimento == 1) {
            JOptionPane.showMessageDialog(null, "NÃO FORAM ENCONTRADOS DADOS PARA PARÂMETROS INFORMADOS!", "Mensagem",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int x = 0; x < lista.size(); x++) {
                CadastroDeClientes cli2 = new CadastroDeClientes();

                cli2.setCodigo(lista.get(x).getCodigo());
                cli2.setNome(lista.get(x).getNome());
                cli2.setCpf(lista.get(x).getCpf());
                cli2.setCidade(lista.get(x).getCidade());
                cli2.setEndereco(lista.get(x).getEndereco());
                cli2.setBairro(lista.get(x).getBairro());

                tabelaInsereRelatorios.addRow(cli2);

            }
        }

    }

    private void cmbTodosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbTodosMousePressed

        if (cmbTodos.isSelected()) {
            txtNomeOuCidadeRelatorio.setEnabled(false);
            txtCodigoRelatorio.setEnabled(false);
        } else {
            txtNomeOuCidadeRelatorio.setEnabled(false);
            txtCodigoRelatorio.setEnabled(false);
        }

        cmbCodigo.setSelected(false);
        cmbNome.setSelected(false);
        cmbCidade.setSelected(false);
        txtNomeOuCidadeRelatorio.setText("");
        txtCodigoRelatorio.setText("");
        Lista.setVisible(false);

    }//GEN-LAST:event_cmbTodosMousePressed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed

        ListaClientes.setVisible(false);
        enter = 1;

    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyReleased

        if (enter == 0) {
            ListaDePesquisa();
            pesquisaOuRelatorio = 1;  // Atribui 1 para pesquisas realizadas na busca do Cadastro do CLiente
        } else {
            enter = 0;
        }

    }//GEN-LAST:event_txtNomeKeyReleased

    private void ListaClientesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaClientesMousePressed

        MostrarPesquisaConsulta();
        ListaClientes.setVisible(false);

    }//GEN-LAST:event_ListaClientesMousePressed

    private void txtCodigoAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoAreaActionPerformed

    private void btnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfActionPerformed

        GeraRelatorioPdf();

    }//GEN-LAST:event_btnPdfActionPerformed

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void txtCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyReleased

        txtCodigo.setText(txtCodigo.getText().replaceAll("[^0-9]", "")); // faz com que pegue o texto a cada tecla digitada, e substituir tudo que não(^) seja numero  por ""

    }//GEN-LAST:event_txtCodigoKeyReleased

    private void txtLimiteDeCreditoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLimiteDeCreditoKeyReleased

        txtLimiteDeCredito.setText(txtLimiteDeCredito.getText().replaceAll("[^0-9,.]", "")); // faz com que pegue o texto a cada tecla digitada, e substituir tudo que não(^) seja numero  por ""

    }//GEN-LAST:event_txtLimiteDeCreditoKeyReleased

    private void txtValorGastoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorGastoKeyReleased

        txtValorGasto.setText(txtValorGasto.getText().replaceAll("[^0-9,.]", "")); // faz com que pegue o texto a cada tecla digitada, e substituir tudo que não(^) seja numero  por ""

    }//GEN-LAST:event_txtValorGastoKeyReleased

    private void paineisDeAcaoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paineisDeAcaoMousePressed

        // ATIVA OS BOTÕES OU BLOQUEIA PARA O CLIENTE NÃO SE CONFUNDIR ENTRE AS TELAS
        if (painelCadastro.isShowing()) {
            btnBuscar.setEnabled(true);
            btnAlterar.setEnabled(true);
            btnSalvar.setEnabled(true);
            btnExcluir.setEnabled(true);
        } else if (painelRelatorio.isShowing()) {
            btnBuscar.setEnabled(false);
            btnAlterar.setEnabled(false);
            btnSalvar.setEnabled(false);
            btnExcluir.setEnabled(false);
        }

    }//GEN-LAST:event_paineisDeAcaoMousePressed

    private void txtCpfMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCpfMousePressed
        ListaClientes.setVisible(false);
    }//GEN-LAST:event_txtCpfMousePressed

    private void txtCodigoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodigoMousePressed
        ListaClientes.setVisible(false);
    }//GEN-LAST:event_txtCodigoMousePressed

    private void txtNomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNomeMousePressed
        ListaClientes.setVisible(false);
    }//GEN-LAST:event_txtNomeMousePressed

    private void txtNomeOuCidadeRelatorioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNomeOuCidadeRelatorioMousePressed
        Lista.setVisible(false);
    }//GEN-LAST:event_txtNomeOuCidadeRelatorioMousePressed

    //GERAR PDF DOS RELATÓRIOS DE CLIENTES
    private void GeraRelatorioPdf() {

        CadastroDeClientes cli = new CadastroDeClientes();

        if (cmbCodigo.isSelected()) {
            if (txtCodigoRelatorio.getText().length() > 0) {
                cli.setCodigo(Integer.parseInt(txtCodigoRelatorio.getText()));
                cli.setClicked("CODIGO");
            }
        } else if (cmbNome.isSelected()) {
            cli.setNome(txtNomeOuCidadeRelatorio.getText());
            cli.setClicked("NOME");
        } else if (cmbCidade.isSelected()) {
            cli.setCidade(txtNomeOuCidadeRelatorio.getText());
            cli.setClicked("CIDADE");
        } else if (cmbTodos.isSelected()) {
            cli.setClicked("TODOS");
        }

        int contadorTabela = tabelaRelatoriosClientes.getRowCount();
        if (contadorTabela > 0) {
            GeraPdf geraPdf = new GeraPdf();
            geraPdf.RelatorioClientes(cli);
        } else {
            JOptionPane.showMessageDialog(null, "Não existe informações na tabela para gerar PDF");
        }

    }

    //ALTERAR DADOS DE CLIENTES
    private void AlterarCliente() {

        CadastroDeClientes cli = new CadastroDeClientes();
        cli.setCodigo(Integer.parseInt(txtCodigo.getText()));
        cli.setNome(txtNome.getText());
        cli.setCpf(txtCpf.getText().replace(".", "").replace("-", "")); // Comando replace limpo a mascara para enviar somente os numeros ao BD
        cli.setEndereco(txtEndereco.getText());
        cli.setCidade(txtCidade.getText());
        cli.setBairro(txtBairro.getText());

        // Selecionando qual tipo de ComboBOX foi informado e envia para salvar as informações
        if (comboboxSexo.getSelectedItem() == "Masculino") {
            cli.setSexo("01"); // em binário 01 significa 1
        } else if (comboboxSexo.getSelectedItem() == "Feminino") {
            cli.setSexo("10"); // em binário 10 significa 2
        }

        cli.setLimiteCredito(Double.parseDouble(txtLimiteDeCredito.getText().replace(".", "").replace(',', '.')));
        cli.setValorGasto(Double.parseDouble(txtValorGasto.getText().replace(".", "").replace(',', '.')));

        ClientesDAO cliDao = new ClientesDAO();
        cliDao.AlterarCliente(cli);
        List<CadastroDeClientes> lista = cliDao.BuscarTelefoneDeCliente(cli);

        // Altera os dados de telefone se tiver
        int contTabela = tabelaTelefones.getRowCount(); // Crio um Contador para receber o valor da Tabela para validar na Classe de DAO
        if (contTabela > 0) {
            cliDao.VerificaCodigoTelefone(cli);
        }

        if (cliDao.VerificaCodigoTelefone(cli) == false) { // código do cliente NÃO existe na tabela clientetelefones ele Salva

            // VALIDO QUANTAS PASSADAS NO FOR ELE TERÁ QUE DAR E INSERIR AS INFORMAÇÕES NO BD ATRAVES DA CLASSE DAO
            for (int x = 0; x < contTabela; x++) {
                CadastroDeClientes cli1 = new CadastroDeClientes();

                cli1.setCodigo(Integer.parseInt(txtCodigo.getText()));
                cli1.setCodigoArea(Integer.parseInt(tabelaInsereTelefone.getValueAt(x, 0).toString()));
                cli1.setTelefone(tabelaInsereTelefone.getValueAt(x, 1).toString());
                cli1.setObservacao(tabelaInsereTelefone.getValueAt(x, 2).toString());

                cliDao.SalvarTelefones(cli1);
            }

        } else if (lista.size() < contTabela) { // SE A TABELA DO BANCO ESTIVER MENOR QUE A DO SISTEMA ELE INSERE MAIS TELEFONES NO BANCO

            // VALIDO QUANTAS PASSADAS NO FOR ELE TERÁ QUE DAR E INSERIR AS INFORMAÇÕES NO BD ATRAVES DA CLASSE DAO
            for (int x = lista.size(); x < contTabela; x++) {
                CadastroDeClientes cli1 = new CadastroDeClientes();

                cli1.setCodigo(Integer.parseInt(txtCodigo.getText()));
                cli1.setCodigoArea(Integer.parseInt(tabelaInsereTelefone.getValueAt(x, 0).toString()));
                cli1.setTelefone(tabelaInsereTelefone.getValueAt(x, 1).toString());
                cli1.setObservacao(tabelaInsereTelefone.getValueAt(x, 2).toString());

                cliDao.SalvarTelefones(cli1);
            }

        } else { // ALTERAÇÃO DE VALORES - COMPARAÇÃO DE LINHAS E COLUNAS DAS TABELAS

            for (int x = 0; x < contTabela; x++) {

                // DELETA AS INFORMAÇÕES DA TABELA
                if (lista.size() > contTabela) {

                    

                } else {

                    CadastroDeClientes cli1 = new CadastroDeClientes();

                    cli1.setCodigo(Integer.parseInt(txtCodigo.getText()));
                    cli1.setCodigoArea(Integer.parseInt(tabelaInsereTelefone.getValueAt(x, 0).toString()));
                    cli1.setTelefone(tabelaInsereTelefone.getValueAt(x, 1).toString());
                    cli1.setObservacao(tabelaInsereTelefone.getValueAt(x, 2).toString());

                    int validaTabelas = 0; // VALIDA SE OS VALORES ENTRE TABELAS ESTÃO IGUAIS OU FORAM ALTERADOSl

                    // ANALISO A TABELA DO BD COM A TABELA DO PROGRAMA PARA VERIFICAR SE ALGUM VALOR FOI ALTERADO PARA A ATUALIZAÇÃO
                    if (tabelaInsereTelefone.getValueAt(x, 0).equals(lista.get(x).getCodigoArea())) {

                        // AQUI AS INFORMAÇÕES SÃO IGUAIS ENTÃO ELE NÃO FAZ NADA
                        // System.out.println("DDD Igual");
                    } else {

                        // System.out.println("DDD foi alterado");
                        validaTabelas = 1;

                    }
                    if (tabelaInsereTelefone.getValueAt(x, 1).toString().trim().equals(lista.get(x).getTelefone())) {

                        // AQUI AS INFORMAÇÕES SÃO IGUAIS ENTÃO ELE NÃO FAZ NADA
                        // System.out.println("TELEFONE Igual");
                    } else {

                        // System.out.println("TELEFONE foi alterado");
                        validaTabelas = 1;

                    }
                    if (tabelaInsereTelefone.getValueAt(x, 2).toString().trim().equals(lista.get(x).getObservacao())) {

                        // AQUI AS INFORMAÇÕES SÃO IGUAIS ENTÃO ELE NÃO FAZ NADA
                        // System.out.println("observação Igual");
                    } else {

                        // System.out.println("OBSERVAÇAO foi alterado");
                        validaTabelas = 1;

                    }

                    // ALTERA AS INFORMAÇÕES DA TABELA
                    if (validaTabelas == 1) {
                        cli1.setCodigo(lista.get(x).getCodigo()); // RECEBE O CÓDIGO DA LISTA 
                        cliDao.AlterarTelefoneCliente(cli1);
                    }

                }
            }

        }

        Cancelar();

    }
    //EXCLUIR CLIENTES DO BD

    private void Deletar() {

        CadastroDeClientes cli = new CadastroDeClientes();
        cli.setCodigo(Integer.parseInt(txtCodigo.getText()));

        ClientesDAO cliDao = new ClientesDAO();
        cliDao.DeletarClientes(cli);

        Cancelar();
    }

    //METODO CANCELAR DO BOTÃO CANCELAR TUDO
    private void Cancelar() {

        BuscarCodigoCliente();

        txtBairro.setText("");
        txtCidade.setText("");
        txtCodigoArea.setText("");
        txtCpf.setText("");
        txtEndereco.setText("");
        txtLimiteDeCredito.setText("");
        txtNome.setText("");
        txtObservacao.setText("");
        txtTelefone.setText("");
        txtValorGasto.setText("");
        comboboxSexo.setSelectedItem("Masculino");
        txtNomeOuCidadeRelatorio.setText("");
        txtCodigoRelatorio.setText("");

        int contadorTabelaTelefone = tabelaInsereTelefone.getRowCount();
        for (int x = 0; x < contadorTabelaTelefone; x++) {
            tabelaInsereTelefone.removeRow(0);
        }

        txtCodigo.requestFocus();

        int contadorTabelaRelatoriosClientes = tabelaRelatoriosClientes.getRowCount();
        for (int x = 0; x < contadorTabelaRelatoriosClientes; x++) {
            tabelaInsereRelatorios.removeRow(0);
        }

        cmbCodigo.setSelected(false);
        cmbCidade.setSelected(false);
        cmbNome.setSelected(false);
        cmbTodos.setSelected(false);
        txtNomeOuCidadeRelatorio.setEnabled(false);
        txtCodigoRelatorio.setEnabled(false);

        pesquisaOuRelatorio = 0;

        btnInserir.setEnabled(true);
        btnRemover.setEnabled(true);
    }

    //METODO INSERIR TELEFONES NA TEBELA DE TELEFONES
    private void InsereTelefonesNaTabela() {

        CadastroDeClientes cli = new CadastroDeClientes();

        cli.setCodigoArea(Integer.parseInt(txtCodigoArea.getText().replace("(", "").replace(")", "")));
        cli.setTelefone(txtTelefone.getText());
        cli.setObservacao(txtObservacao.getText());

        // Adiciona os 3 dados na tabela de Telefones conforme o Metodo addRow da tabela abstrata
        tabelaInsereTelefone.addRow(cli);

        // Limpa os campos de DDD, telefone e observação e seta o mouse na posição de DDD se caso o usuario queira inserir mais telefones
        txtCodigoArea.setText("");
        txtTelefone.setText("");
        txtObservacao.setText("");
        txtCodigoArea.requestFocus();

    }

    private void MostrarPesquisaConsulta() {

        if (pesquisaOuRelatorio == 2) {
            txtNomeOuCidadeRelatorio.setText(Lista.getSelectedValue());
        } else if (pesquisaOuRelatorio == 1) {
            txtNome.setText(ListaClientes.getSelectedValue());
        }

    }

    private void ListaDePesquisa() {

        MODELO.removeAllElements();
        MODELO2.removeAllElements();

        CadastroDeClientes cli = new CadastroDeClientes();

        if (pesquisaOuRelatorio == 2) {

            cli.setNome(txtNomeOuCidadeRelatorio.getText());

            ClientesDAO cliDao = new ClientesDAO();
            List<CadastroDeClientes> lista = cliDao.ListaDePesquisa(cli);

            int valor = 0;
            for (int x = 0; x < lista.size(); x++) {
                MODELO.addElement(lista.get(x).getNome());
                valor++;
            }

            if (valor >= 1) {
                Lista.setVisible(true);
            } else {
                Lista.setVisible(false);
            }

        } else if (pesquisaOuRelatorio == 1) {

            cli.setNome(txtNome.getText());

            ClientesDAO cliDao = new ClientesDAO();
            List<CadastroDeClientes> lista = cliDao.ListaDePesquisa(cli);

            int valor = 0;
            for (int x = 0; x < lista.size(); x++) {
                MODELO2.addElement(lista.get(x).getNome());
                valor++;
            }

            if (valor >= 1) {
                ListaClientes.setVisible(true);
            } else {
                ListaClientes.setVisible(false);
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> Lista;
    private javax.swing.JList<String> ListaClientes;
    private javax.swing.JPanel Painel9;
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscarRelatorio;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnPdf;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox cmbCidade;
    private javax.swing.JCheckBox cmbCodigo;
    private javax.swing.JCheckBox cmbNome;
    private javax.swing.JCheckBox cmbTodos;
    private javax.swing.JComboBox<String> comboboxSexo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane paineisDeAcao;
    private javax.swing.JPanel painelCadastro;
    private javax.swing.JPanel painelRelatorio;
    private javax.swing.JTable tabelaRelatoriosClientes;
    private javax.swing.JTable tabelaTelefones;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JFormattedTextField txtCodigoArea;
    private javax.swing.JTextField txtCodigoRelatorio;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtLimiteDeCredito;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeOuCidadeRelatorio;
    private javax.swing.JTextField txtObservacao;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JTextField txtValorGasto;
    // End of variables declaration//GEN-END:variables
}
